@model CategoryModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Services.Configuration

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl<Category>(new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var catalogPagesLayout = await settingService.GetSettingByKeyAsync("tiffanythemesettings.catalogpageslayout", String.Empty, storeId, true);
    bool isOneColumn = string.Compare(catalogPagesLayout, "one-column", StringComparison.InvariantCultureIgnoreCase) == 0;
    var ajaxFiltersOneColumnWidget = await Component.InvokeAsync("Widget", new { widgetZone = "ajax_filters_when_one_column" });
}

@section subcategories
{
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    @if (!isOneColumn)
    {
        @await Html.PartialAsync("_CategoryTemplate.ProductsInGridOrLines.SubCategories")
    }
}
@section breadcrumbInner
{
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumb">
            <ul>
                <li>
                    <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                    <span class="delimiter">@breadcrumbDelimiter</span>
                </li>
                @{ int position = 1; }
                @foreach (var cat in Model.CategoryBreadcrumb)
                {
                    var isLastCategory = cat.Id == Model.Id;
                    <li>
                        @if (isLastCategory)
                        {
                            <strong class="current-item">@cat.Name</strong>
                            <span id="@(Url.RouteUrl<Category>(new { SeName = cat.SeName }))"></span>
                        }
                        else
                        {
                            <a href="@(Url.RouteUrl<Category>(new { SeName = cat.SeName }))" title="@cat.Name">
                                <span>@cat.Name</span>
                            </a>
                            <span class="delimiter">@breadcrumbDelimiter</span>
                        }
                    </li>
                    position++;
                }
            </ul>
            @if (seoSettings.MicrodataEnabled)
            {
                <script type="application/ld+json">
                    @Html.Raw(Model.JsonLd)
                </script>
            }
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
    }
}

@section CatalogFilters {
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

<div class="page category-page">
    <div class="page-body">
        @if (isOneColumn)
        {
            @await Html.PartialAsync("_CategoryTemplate.ProductsInGridOrLines.SubCategories")
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @if (!String.IsNullOrEmpty(await ajaxFiltersOneColumnWidget.RenderHtmlContentAsync()))
        {
            <div class="tiffany-one-column-ajax-filters-wrapper">@ajaxFiltersOneColumnWidget</div>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="item-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @{
            var catalogProductsViewData = new ViewDataDictionary(ViewData);
            catalogProductsViewData["fetchUrl"] = Html.Raw(Url.RouteUrl("GetCategoryProducts", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>
