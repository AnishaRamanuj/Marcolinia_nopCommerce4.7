@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root";
}
@{
    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    //current category ID
    int currentCategoryId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    int currentManufacturerId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    int currentProductId = 0;
    if (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var catalogPagesLayout = await settingService.GetSettingByKeyAsync("tiffanythemesettings.catalogpageslayout", String.Empty, storeId, true);
    bool isOneColumn = false;
    if (String.Compare(catalogPagesLayout, "one-column", true) == 0)
    {
        isOneColumn = true;
    }

    if (controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("blog", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) ||
         (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("producttagsall", StringComparison.InvariantCultureIgnoreCase)) ||
        controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase))
    {
        isOneColumn = false;
    }

    var categoryNavigationEnabled = await settingService.GetSettingByKeyAsync("tiffanythemesettings.defaultcategorynavigationenabled", false, storeId, true);
    var manufacturerNavigationEnabled = await settingService.GetSettingByKeyAsync("tiffanythemesettings.defaultmanufacturernavigationenabled", false, storeId, true);
    var vendorNavigationEnabled = await settingService.GetSettingByKeyAsync("tiffanythemesettings.defaultvendornavigationenabled", false, storeId, true);
}

@await RenderSectionAsync("breadcrumbInner", false)

@if (IsSectionDefined("subcategories"))
{
    @RenderSection("subcategories")
}

@if (isOneColumn)
{
    <div class="center-1">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @await RenderSectionAsync("CatalogFilters", false)
        @if (categoryNavigationEnabled)
        {
            @await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
        @if (manufacturerNavigationEnabled)
        {
            @await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new { currentManufacturerId = currentManufacturerId })
        }
        @if (vendorNavigationEnabled)
        {
            @await Component.InvokeAsync(typeof(VendorNavigationViewComponent))
        }
        @RenderBody()
        @await Component.InvokeAsync(typeof(PopularProductTagsViewComponent))
        @await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" })
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
}
else
{
    <div class="center-2">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnBefore })
        @RenderBody()
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MainColumnAfter })
    </div>
    <div class="side-2">
        @if (IsSectionDefined("left"))
        {
        	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
            @await RenderSectionAsync("left")
        	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
        else
        {
        	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
        	@await RenderSectionAsync("CatalogFilters", false)
            if (categoryNavigationEnabled)
            {
        		@await Component.InvokeAsync(typeof(CategoryNavigationViewComponent), new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            }
        	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
            if (manufacturerNavigationEnabled)
            {
        		@await Component.InvokeAsync(typeof(ManufacturerNavigationViewComponent), new { currentManufacturerId = currentManufacturerId })
            }
            if (vendorNavigationEnabled)
            {
        		@await Component.InvokeAsync(typeof(VendorNavigationViewComponent))
            }
        	@await Component.InvokeAsync(typeof(RecentlyViewedProductsBlockViewComponent), new { productThumbPictureSize = 64 })
        	@await Component.InvokeAsync(typeof(PopularProductTagsViewComponent))
        	@await Component.InvokeAsync(typeof(PollBlockViewComponent), new { systemKeyword = "LeftColumnPoll" })
        	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
        }
    </div>
}